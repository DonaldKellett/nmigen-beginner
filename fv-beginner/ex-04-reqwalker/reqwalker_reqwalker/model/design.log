
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+1706 (git sha1 2e8d6ec0b0, g++ 9.2.0 -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing ILANG frontend.
Input filename: top.il

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \top

2.1.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.
Module top directly or indirectly contains formal properties -> setting "keep" attribute.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $group_4 in module top.
Marked 1 switch rules as full_case in process $group_3 in module top.
Marked 1 switch rules as full_case in process $group_2 in module top.
Marked 1 switch rules as full_case in process $group_1 in module top.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 20 redundant assignments.
Promoted 16 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\top.$group_78'.
  Set init value: $sample$s$counter$sync$4 = 0
Found init rule in `\top.$group_77'.
  Set init value: $sample$s$state$sync$4 = 4'0000
Found init rule in `\top.$group_76'.
  Set init value: $sample$s$counter$sync$3 = 0
Found init rule in `\top.$group_75'.
  Set init value: $sample$s$state$sync$3 = 4'0000
Found init rule in `\top.$group_74'.
  Set init value: $sample$s$counter$sync$2 = 0
Found init rule in `\top.$group_73'.
  Set init value: $sample$s$state$sync$2 = 4'0000
Found init rule in `\top.$group_72'.
  Set init value: $sample$s$i_req$sync$1 = 1'0
Found init rule in `\top.$group_71'.
  Set init value: $sample$s$counter$sync$1 = 0
Found init rule in `\top.$group_70'.
  Set init value: $sample$s$state$sync$1 = 4'0000
Found init rule in `\top.$group_7'.
  Set init value: \f_pastn_valid = 1'0
Found init rule in `\top.$group_6'.
  Set init value: \f_pastn_counter = 0
Found init rule in `\top.$group_5'.
  Set init value: \f_past_valid = 1'0
Found init rule in `\top.$group_4'.
  Set init value: \state = 4'0000
Found init rule in `\top.$group_3'.
  Set init value: \counter = 0
Found init rule in `\top.$group_2'.
  Set init value: \leds = 8'11111111
Found init rule in `\top.$group_1'.
  Set init value: \fsm_state = 4'0000

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$group_78'.
Creating decoders for process `\top.$group_77'.
Creating decoders for process `\top.$group_76'.
Creating decoders for process `\top.$group_75'.
Creating decoders for process `\top.$group_74'.
Creating decoders for process `\top.$group_73'.
Creating decoders for process `\top.$group_72'.
Creating decoders for process `\top.$group_71'.
Creating decoders for process `\top.$group_70'.
Creating decoders for process `\top.$group_68'.
     1/2: $assert$check$442
     2/2: $assert$en$441
Creating decoders for process `\top.$group_66'.
     1/2: $assert$check$429
     2/2: $assert$en$428
Creating decoders for process `\top.$group_64'.
     1/2: $assert$check$406
     2/2: $assert$en$405
Creating decoders for process `\top.$group_62'.
     1/2: $assert$check$393
     2/2: $assert$en$392
Creating decoders for process `\top.$group_60'.
     1/2: $assert$check$370
     2/2: $assert$en$369
Creating decoders for process `\top.$group_58'.
     1/2: $assert$check$357
     2/2: $assert$en$356
Creating decoders for process `\top.$group_56'.
     1/2: $assert$check$334
     2/2: $assert$en$333
Creating decoders for process `\top.$group_54'.
     1/2: $assert$check$321
     2/2: $assert$en$320
Creating decoders for process `\top.$group_52'.
     1/2: $assert$check$310
     2/2: $assert$en$309
Creating decoders for process `\top.$group_50'.
Creating decoders for process `\top.$group_48'.
Creating decoders for process `\top.$group_46'.
     1/2: $assert$check$279
     2/2: $assert$en$278
Creating decoders for process `\top.$group_44'.
     1/2: $assert$check$266
     2/2: $assert$en$265
Creating decoders for process `\top.$group_42'.
     1/2: $assert$check$259
     2/2: $assert$en$258
Creating decoders for process `\top.$group_40'.
Creating decoders for process `\top.$group_38'.
     1/2: $assert$check$249
     2/2: $assert$en$248
Creating decoders for process `\top.$group_36'.
     1/2: $assert$check$244
     2/2: $assert$en$243
Creating decoders for process `\top.$group_34'.
     1/2: $assert$check$239
     2/2: $assert$en$238
Creating decoders for process `\top.$group_32'.
     1/2: $assert$check$234
     2/2: $assert$en$233
Creating decoders for process `\top.$group_30'.
     1/2: $assert$check$229
     2/2: $assert$en$228
Creating decoders for process `\top.$group_28'.
     1/2: $assert$check$224
     2/2: $assert$en$223
Creating decoders for process `\top.$group_26'.
     1/2: $assert$check$219
     2/2: $assert$en$218
Creating decoders for process `\top.$group_24'.
     1/2: $assert$check$214
     2/2: $assert$en$213
Creating decoders for process `\top.$group_22'.
     1/2: $assert$check$209
     2/2: $assert$en$208
Creating decoders for process `\top.$group_20'.
     1/2: $assert$check$204
     2/2: $assert$en$203
Creating decoders for process `\top.$group_18'.
     1/2: $assert$check$199
     2/2: $assert$en$198
Creating decoders for process `\top.$group_16'.
     1/2: $assert$check$194
     2/2: $assert$en$193
Creating decoders for process `\top.$group_14'.
     1/2: $assert$check$189
     2/2: $assert$en$188
Creating decoders for process `\top.$group_12'.
     1/2: $assert$check$184
     2/2: $assert$en$183
Creating decoders for process `\top.$group_10'.
     1/2: $assert$check$179
     2/2: $assert$en$178
Creating decoders for process `\top.$group_8'.
     1/2: $assert$check
     2/2: $assert$en
Creating decoders for process `\top.$group_7'.
     1/1: \f_pastn_valid$next
Creating decoders for process `\top.$group_6'.
     1/1: \f_pastn_counter$next
Creating decoders for process `\top.$group_5'.
     1/1: \f_past_valid$next
Creating decoders for process `\top.$group_4'.
     1/1: \state$next
Creating decoders for process `\top.$group_3'.
     1/1: \counter$next
Creating decoders for process `\top.$group_2'.
     1/1: \leds$next
Creating decoders for process `\top.$group_1'.
     1/1: \fsm_state$next
Creating decoders for process `\top.$group_0'.

2.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\top.$sample$s$counter$sync$4' using process `\top.$group_78'.
  created $dff cell `$procdff$325' with positive edge clock.
Creating register for signal `\top.$sample$s$state$sync$4' using process `\top.$group_77'.
  created $dff cell `$procdff$326' with positive edge clock.
Creating register for signal `\top.$sample$s$counter$sync$3' using process `\top.$group_76'.
  created $dff cell `$procdff$327' with positive edge clock.
Creating register for signal `\top.$sample$s$state$sync$3' using process `\top.$group_75'.
  created $dff cell `$procdff$328' with positive edge clock.
Creating register for signal `\top.$sample$s$counter$sync$2' using process `\top.$group_74'.
  created $dff cell `$procdff$329' with positive edge clock.
Creating register for signal `\top.$sample$s$state$sync$2' using process `\top.$group_73'.
  created $dff cell `$procdff$330' with positive edge clock.
Creating register for signal `\top.$sample$s$i_req$sync$1' using process `\top.$group_72'.
  created $dff cell `$procdff$331' with positive edge clock.
Creating register for signal `\top.$sample$s$counter$sync$1' using process `\top.$group_71'.
  created $dff cell `$procdff$332' with positive edge clock.
Creating register for signal `\top.$sample$s$state$sync$1' using process `\top.$group_70'.
  created $dff cell `$procdff$333' with positive edge clock.
Creating register for signal `\top.\f_pastn_valid' using process `\top.$group_7'.
  created $dff cell `$procdff$334' with positive edge clock.
Creating register for signal `\top.\f_pastn_counter' using process `\top.$group_6'.
  created $dff cell `$procdff$335' with positive edge clock.
Creating register for signal `\top.\f_past_valid' using process `\top.$group_5'.
  created $dff cell `$procdff$336' with positive edge clock.
Creating register for signal `\top.\state' using process `\top.$group_4'.
  created $dff cell `$procdff$337' with positive edge clock.
Creating register for signal `\top.\counter' using process `\top.$group_3'.
  created $dff cell `$procdff$338' with positive edge clock.
Creating register for signal `\top.\leds' using process `\top.$group_2'.
  created $dff cell `$procdff$339' with positive edge clock.
Creating register for signal `\top.\fsm_state' using process `\top.$group_1'.
  created $dff cell `$procdff$340' with positive edge clock.

2.2.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `top.$group_78'.
Removing empty process `top.$group_77'.
Removing empty process `top.$group_76'.
Removing empty process `top.$group_75'.
Removing empty process `top.$group_74'.
Removing empty process `top.$group_73'.
Removing empty process `top.$group_72'.
Removing empty process `top.$group_71'.
Removing empty process `top.$group_70'.
Found and cleaned up 1 empty switch in `\top.$group_68'.
Removing empty process `top.$group_68'.
Found and cleaned up 1 empty switch in `\top.$group_66'.
Removing empty process `top.$group_66'.
Found and cleaned up 1 empty switch in `\top.$group_64'.
Removing empty process `top.$group_64'.
Found and cleaned up 1 empty switch in `\top.$group_62'.
Removing empty process `top.$group_62'.
Found and cleaned up 1 empty switch in `\top.$group_60'.
Removing empty process `top.$group_60'.
Found and cleaned up 1 empty switch in `\top.$group_58'.
Removing empty process `top.$group_58'.
Found and cleaned up 1 empty switch in `\top.$group_56'.
Removing empty process `top.$group_56'.
Found and cleaned up 1 empty switch in `\top.$group_54'.
Removing empty process `top.$group_54'.
Found and cleaned up 1 empty switch in `\top.$group_52'.
Removing empty process `top.$group_52'.
Removing empty process `top.$group_50'.
Removing empty process `top.$group_48'.
Found and cleaned up 1 empty switch in `\top.$group_46'.
Removing empty process `top.$group_46'.
Found and cleaned up 1 empty switch in `\top.$group_44'.
Removing empty process `top.$group_44'.
Found and cleaned up 1 empty switch in `\top.$group_42'.
Removing empty process `top.$group_42'.
Removing empty process `top.$group_40'.
Found and cleaned up 1 empty switch in `\top.$group_38'.
Removing empty process `top.$group_38'.
Found and cleaned up 1 empty switch in `\top.$group_36'.
Removing empty process `top.$group_36'.
Found and cleaned up 1 empty switch in `\top.$group_34'.
Removing empty process `top.$group_34'.
Found and cleaned up 1 empty switch in `\top.$group_32'.
Removing empty process `top.$group_32'.
Found and cleaned up 1 empty switch in `\top.$group_30'.
Removing empty process `top.$group_30'.
Found and cleaned up 1 empty switch in `\top.$group_28'.
Removing empty process `top.$group_28'.
Found and cleaned up 1 empty switch in `\top.$group_26'.
Removing empty process `top.$group_26'.
Found and cleaned up 1 empty switch in `\top.$group_24'.
Removing empty process `top.$group_24'.
Found and cleaned up 1 empty switch in `\top.$group_22'.
Removing empty process `top.$group_22'.
Found and cleaned up 1 empty switch in `\top.$group_20'.
Removing empty process `top.$group_20'.
Found and cleaned up 1 empty switch in `\top.$group_18'.
Removing empty process `top.$group_18'.
Found and cleaned up 1 empty switch in `\top.$group_16'.
Removing empty process `top.$group_16'.
Found and cleaned up 1 empty switch in `\top.$group_14'.
Removing empty process `top.$group_14'.
Found and cleaned up 1 empty switch in `\top.$group_12'.
Removing empty process `top.$group_12'.
Found and cleaned up 1 empty switch in `\top.$group_10'.
Removing empty process `top.$group_10'.
Found and cleaned up 1 empty switch in `\top.$group_8'.
Removing empty process `top.$group_8'.
Found and cleaned up 2 empty switches in `\top.$group_7'.
Removing empty process `top.$group_7'.
Found and cleaned up 2 empty switches in `\top.$group_6'.
Removing empty process `top.$group_6'.
Found and cleaned up 1 empty switch in `\top.$group_5'.
Removing empty process `top.$group_5'.
Found and cleaned up 18 empty switches in `\top.$group_4'.
Removing empty process `top.$group_4'.
Found and cleaned up 17 empty switches in `\top.$group_3'.
Removing empty process `top.$group_3'.
Found and cleaned up 18 empty switches in `\top.$group_2'.
Removing empty process `top.$group_2'.
Found and cleaned up 18 empty switches in `\top.$group_1'.
Removing empty process `top.$group_1'.
Removing empty process `top.$group_0'.
Cleaned up 104 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~30 debug messages>

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 192 unused wires.
<suppressed ~1 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~516 debug messages>
Removed a total of 172 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~68 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~75 debug messages>
Removed a total of 25 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 197 unused wires.
<suppressed ~1 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $procmux$176: { $procmux$171_CMP $auto$opt_reduce.cc:134:opt_mux$342 }
    New ctrl vector for $pmux cell $procmux$225: { $procmux$171_CMP $procmux$150_CMP $auto$opt_reduce.cc:134:opt_mux$354 $auto$opt_reduce.cc:134:opt_mux$352 $auto$opt_reduce.cc:134:opt_mux$350 $auto$opt_reduce.cc:134:opt_mux$348 $auto$opt_reduce.cc:134:opt_mux$346 $auto$opt_reduce.cc:134:opt_mux$344 $procmux$129_CMP $procmux$126_CMP }
  Optimizing cells in module \top.
Performed a total of 2 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.6.16. Rerunning OPT passes. (Maybe there is more to do..)

2.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

2.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.6.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.6.23. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 33) from port Y of cell top.$100 ($add).
Removed top 1 bits (of 33) from port Y of cell top.$170 ($add).
Removed top 1 bits (of 4) from port B of cell top.$procmux$82_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$procmux$86_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$procmux$90_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$procmux$94_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell top.$procmux$100_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell top.$procmux$102_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell top.$procmux$106_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$procmux$150_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$procmux$153_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$procmux$156_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$procmux$159_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell top.$procmux$162_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell top.$procmux$165_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell top.$procmux$168_CMP0 ($eq).
Removed top 7 bits (of 8) from mux cell top.$procmux$269 ($mux).
Removed top 3 bits (of 4) from mux cell top.$procmux$278 ($mux).
Removed top 2 bits (of 4) from mux cell top.$procmux$281 ($mux).
Removed top 3 bits (of 4) from mux cell top.$procmux$284 ($mux).
Removed top 1 bits (of 4) from mux cell top.$procmux$287 ($mux).
Removed top 3 bits (of 4) from mux cell top.$procmux$290 ($mux).
Removed top 2 bits (of 4) from mux cell top.$procmux$293 ($mux).
Removed top 3 bits (of 4) from mux cell top.$procmux$296 ($mux).
Removed top 3 bits (of 4) from mux cell top.$procmux$302 ($mux).
Removed top 2 bits (of 4) from mux cell top.$procmux$305 ($mux).
Removed top 3 bits (of 4) from mux cell top.$procmux$308 ($mux).
Removed top 1 bits (of 4) from mux cell top.$procmux$311 ($mux).
Removed top 3 bits (of 4) from mux cell top.$procmux$314 ($mux).
Removed top 2 bits (of 4) from mux cell top.$procmux$317 ($mux).
Removed top 3 bits (of 4) from mux cell top.$procmux$320 ($mux).
Removed top 1 bits (of 33) from wire top.$103.
Removed top 1 bits (of 33) from wire top.$168.
Removed top 7 bits (of 8) from wire top.$procmux$269_Y.
Removed top 3 bits (of 4) from wire top.$procmux$278_Y.
Removed top 2 bits (of 4) from wire top.$procmux$281_Y.
Removed top 3 bits (of 4) from wire top.$procmux$284_Y.
Removed top 1 bits (of 4) from wire top.$procmux$287_Y.
Removed top 3 bits (of 4) from wire top.$procmux$290_Y.
Removed top 2 bits (of 4) from wire top.$procmux$293_Y.
Removed top 3 bits (of 4) from wire top.$procmux$296_Y.
Removed top 3 bits (of 4) from wire top.$procmux$302_Y.
Removed top 2 bits (of 4) from wire top.$procmux$305_Y.
Removed top 3 bits (of 4) from wire top.$procmux$308_Y.
Removed top 1 bits (of 4) from wire top.$procmux$311_Y.
Removed top 3 bits (of 4) from wire top.$procmux$314_Y.
Removed top 2 bits (of 4) from wire top.$procmux$317_Y.
Removed top 3 bits (of 4) from wire top.$procmux$320_Y.

2.8. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 17 unused wires.
<suppressed ~1 debug messages>

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

2.11.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

2.11.5. Finished fast OPT passes.

2.12. Printing statistics.

=== top ===

   Number of wires:                222
   Number of wire bits:            956
   Number of public wires:          17
   Number of public wire bits:     167
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                250
     $add                            7
     $and                           12
     $assert                        31
     $dff                           16
     $eq                            53
     $logic_not                     11
     $lt                             2
     $mod                            5
     $mux                           98
     $pmux                           4
     $reduce_bool                    4
     $reduce_or                      7

2.13. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

3. Executing MEMORY_NORDFF pass (extracting $dff cells from $mem).

4. Executing ASYNC2SYNC pass.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

6. Executing SETUNDEF pass (replace undef values with defined constants).

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

7.3. Executing OPT_RMDFF pass (remove dff with constant values).

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

7.5. Finished fast OPT passes.

8. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

9. Executing HIERARCHY pass (managing design hierarchy).

9.1. Analyzing design hierarchy..
Top module:  \top

9.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.
Module top directly or indirectly contains formal properties -> setting "keep" attribute.

10. Executing ILANG backend.
Output filename: ../model/design.il

End of script. Logfile hash: c2356f3cfb, CPU: user 0.18s system 0.00s, MEM: 16.53 MB peak
Yosys 0.9+1706 (git sha1 2e8d6ec0b0, g++ 9.2.0 -fPIC -Os)
Time spent: 25% 8x opt_clean (0 sec), 25% 7x opt_expr (0 sec), ...
