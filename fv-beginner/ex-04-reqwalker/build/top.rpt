
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+1706 (git sha1 2e8d6ec0b0, g++ 9.2.0 -fPIC -Os)


-- Executing script file `top.ys' --

1. Executing ILANG frontend.
Input filename: top.il

2. Executing SYNTH_ECP5 pass.

2.1. Executing Verilog-2005 frontend: /nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_sim.v
Parsing Verilog input from `/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\L6MUX21'.
Generating RTLIL representation for module `\CCU2C'.
Generating RTLIL representation for module `\TRELLIS_RAM16X2'.
Generating RTLIL representation for module `\PFUMX'.
Generating RTLIL representation for module `\TRELLIS_DPR16X4'.
Generating RTLIL representation for module `\DPR16X4C'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\TRELLIS_FF'.
Generating RTLIL representation for module `\TRELLIS_IO'.
Generating RTLIL representation for module `\INV'.
Generating RTLIL representation for module `\TRELLIS_SLICE'.
Generating RTLIL representation for module `\DP16KD'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Successfully finished Verilog frontend.

2.2. Executing Verilog-2005 frontend: /nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_bb.v
Parsing Verilog input from `/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_bb.v' to AST representation.
Generating RTLIL representation for module `\MULT18X18D'.
Generating RTLIL representation for module `\ALU54B'.
Generating RTLIL representation for module `\EHXPLLL'.
Generating RTLIL representation for module `\DTR'.
Generating RTLIL representation for module `\OSCG'.
Generating RTLIL representation for module `\USRMCLK'.
Generating RTLIL representation for module `\JTAGG'.
Generating RTLIL representation for module `\DELAYF'.
Generating RTLIL representation for module `\DELAYG'.
Generating RTLIL representation for module `\IDDRX1F'.
Generating RTLIL representation for module `\IDDRX2F'.
Generating RTLIL representation for module `\IDDR71B'.
Generating RTLIL representation for module `\IDDRX2DQA'.
Generating RTLIL representation for module `\ODDRX1F'.
Generating RTLIL representation for module `\ODDRX2F'.
Generating RTLIL representation for module `\ODDR71B'.
Generating RTLIL representation for module `\OSHX2A'.
Generating RTLIL representation for module `\ODDRX2DQA'.
Generating RTLIL representation for module `\ODDRX2DQSB'.
Generating RTLIL representation for module `\TSHX2DQA'.
Generating RTLIL representation for module `\TSHX2DQSA'.
Generating RTLIL representation for module `\DQSBUFM'.
Generating RTLIL representation for module `\DDRDLLA'.
Generating RTLIL representation for module `\CLKDIVF'.
Generating RTLIL representation for module `\ECLKSYNCB'.
Generating RTLIL representation for module `\ECLKBRIDGECS'.
Generating RTLIL representation for module `\DCCA'.
Generating RTLIL representation for module `\DCUA'.
Generating RTLIL representation for module `\EXTREFB'.
Generating RTLIL representation for module `\PCSCLKDIV'.
Generating RTLIL representation for module `\PUR'.
Generating RTLIL representation for module `\GSR'.
Generating RTLIL representation for module `\SGSR'.
Generating RTLIL representation for module `\PDPW16KD'.
Successfully finished Verilog frontend.

2.3. Executing HIERARCHY pass (managing design hierarchy).

2.3.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \pin_clk100_0
Used module:     \pin_rst_0
Used module:     \pin_led_7
Used module:     \pin_led_6
Used module:     \pin_led_5
Used module:     \pin_led_4
Used module:     \pin_led_3
Used module:     \pin_led_2
Used module:     \pin_led_1
Used module:     \pin_led_0
Used module:     \cd_sync

2.3.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \pin_clk100_0
Used module:     \pin_rst_0
Used module:     \pin_led_7
Used module:     \pin_led_6
Used module:     \pin_led_5
Used module:     \pin_led_4
Used module:     \pin_led_3
Used module:     \pin_led_2
Used module:     \pin_led_1
Used module:     \pin_led_0
Used module:     \cd_sync
Removed 0 unused modules.

2.4. Executing PROC pass (convert processes to netlists).

2.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $group_13 in module top.
Marked 1 switch rules as full_case in process $group_12 in module top.
Marked 1 switch rules as full_case in process $group_4 in module top.
Marked 1 switch rules as full_case in process $group_3 in module top.
Removed a total of 0 dead cases.

2.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 7 redundant assignments.
Promoted 4 assignments to connections.

2.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\top.$group_13'.
  Set init value: \state = 4'0000
Found init rule in `\top.$group_12'.
  Set init value: \counter = 0
Found init rule in `\top.$group_4'.
  Set init value: \pin_led_0_led_0__o = 1'0
  Set init value: \pin_led_1_led_1__o = 1'0
  Set init value: \pin_led_2_led_2__o = 1'0
  Set init value: \pin_led_3_led_3__o = 1'0
  Set init value: \pin_led_4_led_4__o = 1'0
  Set init value: \pin_led_5_led_5__o = 1'0
  Set init value: \pin_led_6_led_6__o = 1'0
  Set init value: \pin_led_7_led_7__o = 1'0
Found init rule in `\top.$group_3'.
  Set init value: \fsm_state = 4'0000
Found init rule in `\top.$group_1'.
  Set init value: \i_req = 1'0
Found init rule in `\top.$group_0'.
  Set init value: \req_count = 29'00000000000000000000000000000

2.4.5. Executing PROC_ARST pass (detect async resets in processes).

2.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$group_13'.
     1/1: \state$next
Creating decoders for process `\top.$group_12'.
     1/1: \counter$next
Creating decoders for process `\top.$group_4'.
     1/8: \pin_led_7_led_7__o$next
     2/8: \pin_led_3_led_3__o$next
     3/8: \pin_led_2_led_2__o$next
     4/8: \pin_led_1_led_1__o$next
     5/8: \pin_led_0_led_0__o$next
     6/8: \pin_led_6_led_6__o$next
     7/8: \pin_led_5_led_5__o$next
     8/8: \pin_led_4_led_4__o$next
Creating decoders for process `\top.$group_3'.
     1/1: \fsm_state$next
Creating decoders for process `\top.$group_2'.
Creating decoders for process `\top.$group_1'.
     1/1: \i_req$next
Creating decoders for process `\top.$group_0'.
Creating decoders for process `\pin_rst_0.$group_0'.
Creating decoders for process `\cd_sync.$group_0'.

2.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

2.4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\top.\state' using process `\top.$group_13'.
  created $dff cell `$procdff$649' with positive edge clock.
Creating register for signal `\top.\counter' using process `\top.$group_12'.
  created $dff cell `$procdff$650' with positive edge clock.
Creating register for signal `\top.\pin_led_0_led_0__o' using process `\top.$group_4'.
  created $dff cell `$procdff$651' with positive edge clock.
Creating register for signal `\top.\pin_led_1_led_1__o' using process `\top.$group_4'.
  created $dff cell `$procdff$652' with positive edge clock.
Creating register for signal `\top.\pin_led_2_led_2__o' using process `\top.$group_4'.
  created $dff cell `$procdff$653' with positive edge clock.
Creating register for signal `\top.\pin_led_3_led_3__o' using process `\top.$group_4'.
  created $dff cell `$procdff$654' with positive edge clock.
Creating register for signal `\top.\pin_led_4_led_4__o' using process `\top.$group_4'.
  created $dff cell `$procdff$655' with positive edge clock.
Creating register for signal `\top.\pin_led_5_led_5__o' using process `\top.$group_4'.
  created $dff cell `$procdff$656' with positive edge clock.
Creating register for signal `\top.\pin_led_6_led_6__o' using process `\top.$group_4'.
  created $dff cell `$procdff$657' with positive edge clock.
Creating register for signal `\top.\pin_led_7_led_7__o' using process `\top.$group_4'.
  created $dff cell `$procdff$658' with positive edge clock.
Creating register for signal `\top.\fsm_state' using process `\top.$group_3'.
  created $dff cell `$procdff$659' with positive edge clock.
Creating register for signal `\top.\i_req' using process `\top.$group_1'.
  created $dff cell `$procdff$660' with positive edge clock.
Creating register for signal `\top.\req_count' using process `\top.$group_0'.
  created $dff cell `$procdff$661' with positive edge clock.

2.4.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 17 empty switches in `\top.$group_13'.
Removing empty process `top.$group_13'.
Found and cleaned up 16 empty switches in `\top.$group_12'.
Removing empty process `top.$group_12'.
Found and cleaned up 17 empty switches in `\top.$group_4'.
Removing empty process `top.$group_4'.
Found and cleaned up 17 empty switches in `\top.$group_3'.
Removing empty process `top.$group_3'.
Removing empty process `top.$group_2'.
Found and cleaned up 1 empty switch in `\top.$group_1'.
Removing empty process `top.$group_1'.
Removing empty process `top.$group_0'.
Removing empty process `pin_rst_0.$group_0'.
Removing empty process `cd_sync.$group_0'.
Cleaned up 68 empty switches.

2.5. Executing FLATTEN pass (flatten design).
Using template pin_rst_0 for cells of type pin_rst_0.
Using template pin_clk100_0 for cells of type pin_clk100_0.
Using template cd_sync for cells of type cd_sync.
Using template pin_led_0 for cells of type pin_led_0.
Using template pin_led_1 for cells of type pin_led_1.
Using template pin_led_2 for cells of type pin_led_2.
Using template pin_led_3 for cells of type pin_led_3.
Using template pin_led_4 for cells of type pin_led_4.
Using template pin_led_5 for cells of type pin_led_5.
Using template pin_led_6 for cells of type pin_led_6.
Using template pin_led_7 for cells of type pin_led_7.
<suppressed ~11 debug messages>
No more expansions possible.
Deleting now unused module pin_clk100_0.
Deleting now unused module pin_rst_0.
Deleting now unused module pin_led_7.
Deleting now unused module pin_led_6.
Deleting now unused module pin_led_5.
Deleting now unused module pin_led_4.
Deleting now unused module pin_led_3.
Deleting now unused module pin_led_2.
Deleting now unused module pin_led_1.
Deleting now unused module pin_led_0.
Deleting now unused module cd_sync.

2.6. Executing TRIBUF pass.

2.7. Executing DEMINOUT pass (demote inout ports to input or output).

2.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~13 debug messages>

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 51 unused cells and 252 unused wires.
<suppressed ~57 debug messages>

2.10. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~606 debug messages>
Removed a total of 202 cells.

2.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~354 debug messages>
Removed a total of 118 cells.

2.11.6. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec \state = 4'0000 to constant driver in module top.
Promoted 1 init specs to constant drivers.

2.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 320 unused wires.
<suppressed ~1 debug messages>

2.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.11.9. Rerunning OPT passes. (Maybe there is more to do..)

2.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $procmux$168: { $procmux$212_CMP $auto$opt_reduce.cc:134:opt_mux$663 }
    New ctrl vector for $pmux cell $procmux$215: { $procmux$212_CMP $procmux$193_CMP $auto$opt_reduce.cc:134:opt_mux$665 }
    New ctrl vector for $pmux cell $procmux$263: { $procmux$212_CMP $auto$opt_reduce.cc:134:opt_mux$669 $auto$opt_reduce.cc:134:opt_mux$667 }
    New ctrl vector for $pmux cell $procmux$311: { $procmux$212_CMP $auto$opt_reduce.cc:134:opt_mux$673 $auto$opt_reduce.cc:134:opt_mux$671 }
    New ctrl vector for $pmux cell $procmux$359: { $procmux$212_CMP $auto$opt_reduce.cc:134:opt_mux$677 $auto$opt_reduce.cc:134:opt_mux$675 }
    New ctrl vector for $pmux cell $procmux$407: { $procmux$212_CMP $procmux$172_CMP $auto$opt_reduce.cc:134:opt_mux$679 }
    New ctrl vector for $pmux cell $procmux$456: { $procmux$212_CMP $auto$opt_reduce.cc:134:opt_mux$683 $auto$opt_reduce.cc:134:opt_mux$681 }
    New ctrl vector for $pmux cell $procmux$504: { $procmux$212_CMP $auto$opt_reduce.cc:134:opt_mux$687 $auto$opt_reduce.cc:134:opt_mux$685 }
    New ctrl vector for $pmux cell $procmux$552: { $procmux$212_CMP $auto$opt_reduce.cc:134:opt_mux$691 $auto$opt_reduce.cc:134:opt_mux$689 }
  Optimizing cells in module \top.
Performed a total of 9 changes.

2.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.11.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.11.16. Rerunning OPT passes. (Maybe there is more to do..)

2.11.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.11.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.11.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.11.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.11.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.11.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.11.23. Finished OPT passes. (There is nothing left to do.)

2.12. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 30) from port Y of cell top.$3 ($add).
Removed top 1 bits (of 33) from port Y of cell top.$100 ($add).
Removed top 1 bits (of 4) from port B of cell top.$procmux$193_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$procmux$196_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$procmux$199_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$procmux$202_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell top.$procmux$205_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell top.$procmux$208_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell top.$procmux$211_CMP0 ($eq).
Removed top 3 bits (of 4) from mux cell top.$procmux$602 ($mux).
Removed top 2 bits (of 4) from mux cell top.$procmux$605 ($mux).
Removed top 3 bits (of 4) from mux cell top.$procmux$608 ($mux).
Removed top 1 bits (of 4) from mux cell top.$procmux$611 ($mux).
Removed top 3 bits (of 4) from mux cell top.$procmux$614 ($mux).
Removed top 2 bits (of 4) from mux cell top.$procmux$617 ($mux).
Removed top 3 bits (of 4) from mux cell top.$procmux$620 ($mux).
Removed top 3 bits (of 4) from mux cell top.$procmux$626 ($mux).
Removed top 2 bits (of 4) from mux cell top.$procmux$629 ($mux).
Removed top 3 bits (of 4) from mux cell top.$procmux$632 ($mux).
Removed top 1 bits (of 4) from mux cell top.$procmux$635 ($mux).
Removed top 3 bits (of 4) from mux cell top.$procmux$638 ($mux).
Removed top 2 bits (of 4) from mux cell top.$procmux$641 ($mux).
Removed top 3 bits (of 4) from mux cell top.$procmux$644 ($mux).
Removed top 1 bits (of 33) from wire top.$103.
Removed top 3 bits (of 4) from wire top.$procmux$602_Y.
Removed top 2 bits (of 4) from wire top.$procmux$605_Y.
Removed top 3 bits (of 4) from wire top.$procmux$608_Y.
Removed top 1 bits (of 4) from wire top.$procmux$611_Y.
Removed top 3 bits (of 4) from wire top.$procmux$614_Y.
Removed top 2 bits (of 4) from wire top.$procmux$617_Y.
Removed top 3 bits (of 4) from wire top.$procmux$620_Y.
Removed top 3 bits (of 4) from wire top.$procmux$626_Y.
Removed top 2 bits (of 4) from wire top.$procmux$629_Y.
Removed top 3 bits (of 4) from wire top.$procmux$632_Y.
Removed top 1 bits (of 4) from wire top.$procmux$635_Y.
Removed top 3 bits (of 4) from wire top.$procmux$638_Y.
Removed top 2 bits (of 4) from wire top.$procmux$641_Y.
Removed top 3 bits (of 4) from wire top.$procmux$644_Y.

2.13. Executing PEEPOPT pass (run peephole optimizers).

2.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 16 unused wires.
<suppressed ~1 debug messages>

2.15. Executing SHARE pass (SAT-based resource sharing).

2.16. Executing TECHMAP pass (map to technology primitives).

2.16.1. Executing Verilog-2005 frontend: /nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.16.2. Continuing TECHMAP pass.
No more expansions possible.

2.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.19. Executing TECHMAP pass (map to technology primitives).

2.19.1. Executing Verilog-2005 frontend: /nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

2.19.2. Executing Verilog-2005 frontend: /nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/dsp_map.v
Parsing Verilog input from `/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__MUL18X18'.
Successfully finished Verilog frontend.

2.19.3. Continuing TECHMAP pass.
No more expansions possible.

2.20. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $100 ($add).
  creating $macc model for $3 ($add).
  creating $alu model for $macc $3.
  creating $alu model for $macc $100.
  creating $alu cell for $100: $auto$alumacc.cc:485:replace_alu$707
  creating $alu cell for $3: $auto$alumacc.cc:485:replace_alu$710
  created 2 $alu and 0 $macc cells.

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.21.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.21.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.21.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

2.21.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

2.21.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.21.9. Rerunning OPT passes. (Maybe there is more to do..)

2.21.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.21.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.21.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.21.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.21.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.21.16. Finished OPT passes. (There is nothing left to do.)

2.22. Executing FSM pass (extract and optimize FSM).

2.22.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking top.fsm_state as FSM state register:
    Register has an initialization value.
    Circuit seems to be self-resetting.

2.22.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.22.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.22.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.22.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.22.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.22.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.23. Executing OPT pass (performing simple optimizations).

2.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.23.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.23.5. Finished fast OPT passes.

2.24. Executing MEMORY pass.

2.24.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.24.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.24.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.24.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.24.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.24.6. Executing MEMORY_COLLECT pass (generating $mem cells).

2.25. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.26. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.27. Executing TECHMAP pass (map to technology primitives).

2.27.1. Executing Verilog-2005 frontend: /nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/brams_map.v
Parsing Verilog input from `/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ECP5_DP16KD'.
Generating RTLIL representation for module `\$__ECP5_PDPW16KD'.
Successfully finished Verilog frontend.

2.27.2. Continuing TECHMAP pass.
No more expansions possible.

2.28. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.29. Executing TECHMAP pass (map to technology primitives).

2.29.1. Executing Verilog-2005 frontend: /nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/lutrams_map.v
Parsing Verilog input from `/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/lutrams_map.v' to AST representation.
Generating RTLIL representation for module `\$__TRELLIS_DPR16X4'.
Successfully finished Verilog frontend.

2.29.2. Continuing TECHMAP pass.
No more expansions possible.

2.30. Executing OPT pass (performing simple optimizations).

2.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~5 debug messages>

2.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.30.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.30.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.30.5. Finished fast OPT passes.

2.31. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.32. Executing OPT pass (performing simple optimizations).

2.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

2.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $procmux$598:
      Old ports: A=4'1111, B=4'0000, Y=$procmux$598_Y
      New ports: A=1'1, B=1'0, Y=$procmux$598_Y [0]
      New connections: $procmux$598_Y [3:1] = { $procmux$598_Y [0] $procmux$598_Y [0] $procmux$598_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$611:
      Old ports: A=3'011, B=3'100, Y=$auto$wreduce.cc:460:run$696 [2:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:460:run$696 [2] $auto$wreduce.cc:460:run$696 [0] }
      New connections: $auto$wreduce.cc:460:run$696 [1] = $auto$wreduce.cc:460:run$696 [0]
    Consolidated identical input bits for $mux cell $procmux$623:
      Old ports: A=4'0111, B=4'1000, Y=$procmux$623_Y
      New ports: A=2'01, B=2'10, Y={ $procmux$623_Y [3] $procmux$623_Y [0] }
      New connections: $procmux$623_Y [2:1] = { $procmux$623_Y [0] $procmux$623_Y [0] }
  Optimizing cells in module \top.
Performed a total of 3 changes.

2.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.32.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.32.9. Rerunning OPT passes. (Maybe there is more to do..)

2.32.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

2.32.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.32.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.32.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.32.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.32.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.32.16. Finished OPT passes. (There is nothing left to do.)

2.33. Executing TECHMAP pass (map to technology primitives).

2.33.1. Executing Verilog-2005 frontend: /nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.33.2. Executing Verilog-2005 frontend: /nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/arith_map.v
Parsing Verilog input from `/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ecp5_alu'.
Successfully finished Verilog frontend.

2.33.3. Continuing TECHMAP pass.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=29\Y_WIDTH=29 for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=15 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~346 debug messages>

2.34. Executing OPT pass (performing simple optimizations).

2.34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~366 debug messages>

2.34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~414 debug messages>
Removed a total of 138 cells.

2.34.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 90 unused cells and 351 unused wires.
<suppressed ~91 debug messages>

2.34.5. Finished fast OPT passes.

2.35. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.36. Executing dff2dffs pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into DFFs in top.
  Merging $auto$simplemap.cc:277:simplemap_mux$1251 (A=1'0, B=$procmux$166_Y [0], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1546 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1252 (A=1'0, B=$procmux$166_Y [1], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1547 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1253 (A=1'0, B=$procmux$166_Y [2], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1548 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1254 (A=1'0, B=$procmux$166_Y [3], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1549 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1255 (A=1'0, B=$procmux$166_Y [4], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1550 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1256 (A=1'0, B=$procmux$166_Y [5], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1551 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1257 (A=1'0, B=$procmux$166_Y [6], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1552 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1258 (A=1'0, B=$procmux$166_Y [7], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1553 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1259 (A=1'0, B=$procmux$166_Y [8], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1554 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1260 (A=1'0, B=$procmux$166_Y [9], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1555 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1261 (A=1'0, B=$procmux$166_Y [10], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1556 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1262 (A=1'0, B=$procmux$166_Y [11], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1557 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1263 (A=1'0, B=$procmux$166_Y [12], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1558 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1264 (A=1'0, B=$procmux$166_Y [13], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1559 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1265 (A=1'0, B=$procmux$166_Y [14], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1560 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1266 (A=1'0, B=$procmux$166_Y [15], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1561 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1267 (A=1'0, B=$procmux$166_Y [16], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1562 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1268 (A=1'0, B=$procmux$166_Y [17], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1563 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1269 (A=1'0, B=$procmux$166_Y [18], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1564 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1270 (A=1'0, B=$procmux$166_Y [19], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1565 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1271 (A=1'0, B=$procmux$166_Y [20], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1566 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1272 (A=1'0, B=$procmux$166_Y [21], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1567 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1273 (A=1'0, B=$procmux$166_Y [22], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1568 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1274 (A=1'0, B=$procmux$166_Y [23], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1569 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1275 (A=1'0, B=$procmux$166_Y [24], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1570 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1276 (A=1'0, B=$procmux$166_Y [25], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1571 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1277 (A=1'0, B=$procmux$166_Y [26], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1572 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1278 (A=1'0, B=$procmux$166_Y [27], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1573 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1279 (A=1'0, B=$procmux$166_Y [28], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1574 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1280 (A=1'0, B=$procmux$166_Y [29], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1575 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1281 (A=1'0, B=$procmux$166_Y [30], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1576 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$1282 (A=1'0, B=$procmux$166_Y [31], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1577 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$2159 (A=1'0, B=$procmux$600.Y_B [1], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1587 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$2160 (A=1'0, B=$procmux$600.Y_B [2], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1588 ($_DFF_P_).
  Merging $auto$simplemap.cc:277:simplemap_mux$2161 (A=1'0, B=$procmux$600.Y_B [3], S=$auto$opt_reduce.cc:134:opt_mux$663) into $auto$simplemap.cc:420:simplemap_dff$1589 ($_DFF_P_).

2.37. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 35 unused cells and 1 unused wires.
<suppressed ~36 debug messages>

2.38. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $__DFFS_PP1_ -> $__DFFSE_PP1
  $__DFFS_PP0_ -> $__DFFSE_PP0
  $__DFFS_PN1_ -> $__DFFSE_PN1
  $__DFFS_PN0_ -> $__DFFSE_PN0
  $__DFFS_NP1_ -> $__DFFSE_NP1
  $__DFFS_NP0_ -> $__DFFSE_NP0
  $__DFFS_NN1_ -> $__DFFSE_NN1
  $__DFFS_NN0_ -> $__DFFSE_NN0
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module top:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1578 to $_DFFE_PP_ for \pin_led_0_led_0__o$next -> \pin_led_0_led_0__o.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1579 to $_DFFE_PP_ for \pin_led_1_led_1__o$next -> \pin_led_1_led_1__o.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1580 to $_DFFE_PP_ for \pin_led_2_led_2__o$next -> \pin_led_2_led_2__o.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1581 to $_DFFE_PP_ for \pin_led_3_led_3__o$next -> \pin_led_3_led_3__o.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1582 to $_DFFE_PP_ for \pin_led_4_led_4__o$next -> \pin_led_4_led_4__o.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1583 to $_DFFE_PP_ for \pin_led_5_led_5__o$next -> \pin_led_5_led_5__o.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1584 to $_DFFE_PP_ for \pin_led_6_led_6__o$next -> \pin_led_6_led_6__o.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1585 to $_DFFE_PP_ for \pin_led_7_led_7__o$next -> \pin_led_7_led_7__o.

2.39. Executing TECHMAP pass (map to technology primitives).

2.39.1. Executing Verilog-2005 frontend: /nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v
Parsing Verilog input from `/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFS_NN0_'.
Generating RTLIL representation for module `\$__DFFS_NN1_'.
Generating RTLIL representation for module `\$__DFFS_PN0_'.
Generating RTLIL representation for module `\$__DFFS_PN1_'.
Generating RTLIL representation for module `\$__DFFS_NP0_'.
Generating RTLIL representation for module `\$__DFFS_NP1_'.
Generating RTLIL representation for module `\$__DFFS_PP0_'.
Generating RTLIL representation for module `\$__DFFS_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$__DFFSE_NN0'.
Generating RTLIL representation for module `\$__DFFSE_NN1'.
Generating RTLIL representation for module `\$__DFFSE_PN0'.
Generating RTLIL representation for module `\$__DFFSE_PN1'.
Generating RTLIL representation for module `\$__DFFSE_NP0'.
Generating RTLIL representation for module `\$__DFFSE_NP1'.
Generating RTLIL representation for module `\$__DFFSE_PP0'.
Generating RTLIL representation for module `\$__DFFSE_PP1'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Successfully finished Verilog frontend.

2.39.2. Continuing TECHMAP pass.
Using template IB for cells of type IB.
Using template \$__DFFS_PN0_ for cells of type $__DFFS_PN0_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template $paramod$3fc7f81ab348e85f40c1f725ddea1f891bb88019\FD1S3AX for cells of type FD1S3AX.
Using template OB for cells of type OB.
No more expansions possible.
<suppressed ~97 debug messages>

2.40. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~19 debug messages>

2.41. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping top.$techmap$techmap2247$auto$simplemap.cc:420:simplemap_dff$1550.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2270$auto$simplemap.cc:420:simplemap_dff$1547.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2246$auto$simplemap.cc:420:simplemap_dff$1549.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2271$auto$simplemap.cc:420:simplemap_dff$1548.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2272$auto$simplemap.cc:420:simplemap_dff$1551.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2273$auto$simplemap.cc:420:simplemap_dff$1552.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2274$auto$simplemap.cc:420:simplemap_dff$1553.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2275$auto$simplemap.cc:420:simplemap_dff$1554.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2276$auto$simplemap.cc:420:simplemap_dff$1555.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2277$auto$simplemap.cc:420:simplemap_dff$1556.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2278$auto$simplemap.cc:420:simplemap_dff$1557.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2279$auto$simplemap.cc:420:simplemap_dff$1558.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2280$auto$simplemap.cc:420:simplemap_dff$1559.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2281$auto$simplemap.cc:420:simplemap_dff$1560.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2282$auto$simplemap.cc:420:simplemap_dff$1561.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2283$auto$simplemap.cc:420:simplemap_dff$1562.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2284$auto$simplemap.cc:420:simplemap_dff$1563.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2285$auto$simplemap.cc:420:simplemap_dff$1564.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2286$auto$simplemap.cc:420:simplemap_dff$1565.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2287$auto$simplemap.cc:420:simplemap_dff$1566.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2288$auto$simplemap.cc:420:simplemap_dff$1567.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2289$auto$simplemap.cc:420:simplemap_dff$1568.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2290$auto$simplemap.cc:420:simplemap_dff$1569.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2291$auto$simplemap.cc:420:simplemap_dff$1570.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2292$auto$simplemap.cc:420:simplemap_dff$1571.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2293$auto$simplemap.cc:420:simplemap_dff$1572.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2294$auto$simplemap.cc:420:simplemap_dff$1573.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2295$auto$simplemap.cc:420:simplemap_dff$1574.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2296$auto$simplemap.cc:420:simplemap_dff$1575.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2297$auto$simplemap.cc:420:simplemap_dff$1576.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2248$auto$simplemap.cc:420:simplemap_dff$1546.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2298$auto$simplemap.cc:420:simplemap_dff$1577.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2299$auto$simplemap.cc:420:simplemap_dff$1587.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2300$auto$simplemap.cc:420:simplemap_dff$1588.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).
Mapping top.$techmap$techmap2301$auto$simplemap.cc:420:simplemap_dff$1589.$logic_not$/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v:22$2234 ($logic_not).

2.42. Executing ECP5_FFINIT pass (implement FF init values).
Handling FF init values in top.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1565 (TRELLIS_FF): \counter [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1564 (TRELLIS_FF): \counter [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1563 (TRELLIS_FF): \counter [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1562 (TRELLIS_FF): \counter [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1561 (TRELLIS_FF): \counter [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1560 (TRELLIS_FF): \counter [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1559 (TRELLIS_FF): \counter [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1558 (TRELLIS_FF): \counter [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1557 (TRELLIS_FF): \counter [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1556 (TRELLIS_FF): \counter [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1555 (TRELLIS_FF): \counter [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1554 (TRELLIS_FF): \counter [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1553 (TRELLIS_FF): \counter [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1552 (TRELLIS_FF): \counter [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1551 (TRELLIS_FF): \counter [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1548 (TRELLIS_FF): \counter [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1547 (TRELLIS_FF): \counter [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1546 (TRELLIS_FF): \counter [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1550 (TRELLIS_FF): \counter [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1549 (TRELLIS_FF): \counter [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1569 (TRELLIS_FF): \counter [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1568 (TRELLIS_FF): \counter [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1567 (TRELLIS_FF): \counter [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1566 (TRELLIS_FF): \counter [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1619 (TRELLIS_FF): \req_count [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1589 (TRELLIS_FF): \fsm_state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1588 (TRELLIS_FF): \fsm_state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1587 (TRELLIS_FF): \fsm_state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1577 (TRELLIS_FF): \counter [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1576 (TRELLIS_FF): \counter [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1575 (TRELLIS_FF): \counter [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1574 (TRELLIS_FF): \counter [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1573 (TRELLIS_FF): \counter [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1572 (TRELLIS_FF): \counter [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1571 (TRELLIS_FF): \counter [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1578 (TRELLIS_FF): \pin_led_0_led_0__o = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1579 (TRELLIS_FF): \pin_led_1_led_1__o = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1580 (TRELLIS_FF): \pin_led_2_led_2__o = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1581 (TRELLIS_FF): \pin_led_3_led_3__o = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1582 (TRELLIS_FF): \pin_led_4_led_4__o = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1583 (TRELLIS_FF): \pin_led_5_led_5__o = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1584 (TRELLIS_FF): \pin_led_6_led_6__o = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1585 (TRELLIS_FF): \pin_led_7_led_7__o = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1586 (TRELLIS_FF): \fsm_state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1590 (TRELLIS_FF): \i_req = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1592 (TRELLIS_FF): \req_count [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1593 (TRELLIS_FF): \req_count [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1594 (TRELLIS_FF): \req_count [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1595 (TRELLIS_FF): \req_count [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1596 (TRELLIS_FF): \req_count [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1597 (TRELLIS_FF): \req_count [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1598 (TRELLIS_FF): \req_count [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1599 (TRELLIS_FF): \req_count [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1600 (TRELLIS_FF): \req_count [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1601 (TRELLIS_FF): \req_count [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1602 (TRELLIS_FF): \req_count [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1603 (TRELLIS_FF): \req_count [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1604 (TRELLIS_FF): \req_count [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1605 (TRELLIS_FF): \req_count [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1606 (TRELLIS_FF): \req_count [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1607 (TRELLIS_FF): \req_count [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1608 (TRELLIS_FF): \req_count [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1609 (TRELLIS_FF): \req_count [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1610 (TRELLIS_FF): \req_count [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1611 (TRELLIS_FF): \req_count [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1612 (TRELLIS_FF): \req_count [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1613 (TRELLIS_FF): \req_count [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1614 (TRELLIS_FF): \req_count [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1615 (TRELLIS_FF): \req_count [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1616 (TRELLIS_FF): \req_count [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1617 (TRELLIS_FF): \req_count [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1618 (TRELLIS_FF): \req_count [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1591 (TRELLIS_FF): \req_count [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1570 (TRELLIS_FF): \counter [24] = 0

2.43. Executing ECP5_GSR pass (implement FF init values).
Handling GSR in top.
<suppressed ~1 debug messages>

2.44. Executing ATTRMVCP pass (move or copy attributes).

2.45. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 315 unused wires.
<suppressed ~1 debug messages>

2.46. Executing TECHMAP pass (map to technology primitives).

2.46.1. Executing Verilog-2005 frontend: /nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/latches_map.v
Parsing Verilog input from `/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.46.2. Continuing TECHMAP pass.
No more expansions possible.

2.47. Executing ABC pass (technology mapping using ABC).

2.47.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 405 gates and 513 wires to a netlist network with 106 inputs and 88 outputs.

2.47.1.1. Executing ABC.
Running ABC command: /nix/store/pa84qv41gpg1shd7j1nrp6d9kq6lsd8v-abc-verifier-2020-01-11/bin/abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + dress 
ABC: Total number of equiv classes                =      50.
ABC: Participating nodes from both networks       =     197.
ABC: Participating nodes from the first network   =      92. (  80.00 % of nodes)
ABC: Participating nodes from the second network  =     105. (  91.30 % of nodes)
ABC: Node pairs (any polarity)                    =      92. (  80.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =      89. (  77.39 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.47.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      105
ABC RESULTS:        internal signals:      319
ABC RESULTS:           input signals:      106
ABC RESULTS:          output signals:       88
Removing temp directory.
Removed 0 unused cells and 355 unused wires.

2.48. Executing TECHMAP pass (map to technology primitives).

2.48.1. Executing Verilog-2005 frontend: /nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v
Parsing Verilog input from `/nix/store/rks1nycgijc8xq8vjb1nbz9slkw49id9-yosys-2020.02.07/bin/../share/yosys/ecp5/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFS_NN0_'.
Generating RTLIL representation for module `\$__DFFS_NN1_'.
Generating RTLIL representation for module `\$__DFFS_PN0_'.
Generating RTLIL representation for module `\$__DFFS_PN1_'.
Generating RTLIL representation for module `\$__DFFS_NP0_'.
Generating RTLIL representation for module `\$__DFFS_NP1_'.
Generating RTLIL representation for module `\$__DFFS_PP0_'.
Generating RTLIL representation for module `\$__DFFS_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$__DFFSE_NN0'.
Generating RTLIL representation for module `\$__DFFSE_NN1'.
Generating RTLIL representation for module `\$__DFFSE_PN0'.
Generating RTLIL representation for module `\$__DFFSE_PN1'.
Generating RTLIL representation for module `\$__DFFSE_NP0'.
Generating RTLIL representation for module `\$__DFFSE_NP1'.
Generating RTLIL representation for module `\$__DFFSE_PP0'.
Generating RTLIL representation for module `\$__DFFSE_PP1'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.48.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=2147450880 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10000000000000000000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod$50d6e2f5f2233833320ef16523784a618ff05e30\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10101010101010100011111111000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod$20c19fb3261d3cea1f1c72212ee5412f74a75461\$lut for cells of type $lut.
Using template $paramod$ce3fc74551cc96d872d55de78c446854b640fc37\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010100 for cells of type $lut.
Using template $paramod$bc33ad112d2c51717bcf52eb2f07775ec8396bc6\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod$774a556323a2c49c28efea0f83cdd1a340c356a5\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11111111111111110101110011001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000001 for cells of type $lut.
No more expansions possible.
<suppressed ~344 debug messages>

2.49. Executing OPT_LUT_INS pass (discard unused LUT inputs).
Optimizing LUTs in top.
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2369.lut1 (4 -> 0)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2386.lut1 (4 -> 1)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2386.lut3 (4 -> 1)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2386.lut5 (4 -> 1)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2386.lut6 (4 -> 3)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2386.lut7 (4 -> 3)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2393.lut3 (4 -> 1)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2393.lut5 (4 -> 1)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2393.lut6 (4 -> 3)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2393.lut7 (4 -> 3)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2391.lut2 (4 -> 0)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2391.lut3 (4 -> 0)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2389.lut4 (4 -> 2)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2389.lut5 (4 -> 2)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2389.lut7 (4 -> 2)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2387.lut2 (4 -> 1)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2387.lut3 (4 -> 1)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2382.lut2 (4 -> 0)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2382.lut3 (4 -> 0)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2384.lut1 (4 -> 0)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2382.lut0 (4 -> 1)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2387.lut0 (4 -> 1)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2387.lut1 (4 -> 3)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2391.lut0 (4 -> 1)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2399.lut0 (4 -> 0)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2393.lut1 (4 -> 1)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2405.lut0 (4 -> 0)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2439.lut1 (4 -> 1)
  Optimizing lut $abc$2368$auto$blifparse.cc:498:parse_blif$2439.lut0 (4 -> 3)
Removed 0 unused cells and 142 unused wires.

2.50. Executing AUTONAME pass.
Renamed 1153 objects in module top (15 iterations).
<suppressed ~391 debug messages>

2.51. Executing HIERARCHY pass (managing design hierarchy).

2.51.1. Analyzing design hierarchy..
Top module:  \top

2.51.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

2.52. Printing statistics.

=== top ===

   Number of wires:                201
   Number of wire bits:            477
   Number of public wires:         201
   Number of public wire bits:     477
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                263
     CCU2C                          31
     L6MUX21                        12
     LUT4                          108
     PFUMX                          25
     SGSR                            1
     TRELLIS_FF                     76
     TRELLIS_IO                     10

2.53. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

3. Executing JSON backend.

End of script. Logfile hash: 82b53872c8, CPU: user 0.69s system 0.05s, MEM: 259.39 MB peak
Yosys 0.9+1706 (git sha1 2e8d6ec0b0, g++ 9.2.0 -fPIC -Os)
Time spent: 39% 13x read_verilog (0 sec), 12% 19x opt_clean (0 sec), ...
